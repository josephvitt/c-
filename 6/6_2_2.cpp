/*
数组的存储与初始化
一维数组的存储
数组元素在内存中顺次存放，它们的地址是连续的。元素间物理地址上的相邻，对应着逻辑次序上的相邻。
int a[10]
注意：
数组名字是数组的首元素的内存地址。
数组名是一个常量，不能被赋值。

一维数组的初始化
1.列出全部元素的初始值
static int a[10] = {0,1,2,3,4,5,6,7,8,9}
2.可以只给一部分元素指定初值
static int a[10] = {0,1,2,3,4}
3.列出全部数据元素初值时，可以不指定数组长度
static int a[] = {0,1,2,3,4,5,6,7,8,9}

二维数组的存储
1.按行存放
float a[3][4];
//0行的首地址
a[0] -- a00 a01 a02 a03
//1行的首地址
a[1] -- a10 a11 a12 a13
//2行的首地址
a[2] -- a20 a21 a22 a23
其中数组a的存储顺序为:
a00 a01 a02 a03 a10 a11 a12 a13 a20 a21 a22 a23


二维数组的初始化
1.将所有初值写在一个{},按顺序初始化
static int a[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12};
2.分行列出二维数组元素的初值
static int a[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
3.可以只对部分元素初始化
static int a[3][4] = {{1},{0,6},{0,0,11}};
4.列出全部初始值，第一维下标个数可以省略
static int a[][4]={1,2,3,4,5,6,7,8,9,10,11,12}
或者
static int a[][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12}}

5.如果不做任何初始化，局部作用域的非静态数组中会存在垃圾数据。
static数组中的数据默认初始化为0
6.如果只对部分元素初始化，剩下的未显示初始化的元素，将自动被初始化为0

*/
//求Fibonacci数列的前20项，将结果存放在数组中
#include <iostream>
using namespace std;
int main(){
    //初始化第0、1个数
    int f[20] = {1,1};
    //求第2~19个数
    for (int i = 2; i < 20; i++)
    {
        f[i] = f[i-2] + f[i-1];
    }
    for (int i = 0; i < 20; i++)
    {
        //输出每行5个
        if(i % 5 == 0){
            cout << endl;
        }
        //设置输出宽度为12
        cout.width(12);
        cout << f[i];
    }
    return 0;
}